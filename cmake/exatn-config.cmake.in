# - Config file for ExaTN
# To point to your install of ExaTN, pass the
# EXATN_ROOT flag to your cmake configure.
#
# It defines the following variables
#  EXATN_INCLUDE_DIRS - include directories for XACC
#  EXATN_LIBRARIES    - libraries to link against
#  EXATN_LIBRARY_DIR  - the XACC library directory
include(CTest)
if (NOT EXATN_ROOT)
   get_filename_component(EXATN_ROOT "${CMAKE_CURRENT_LIST_FILE}" PATH)
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${EXATN_ROOT}/share/exatn)

set (EXATN_LIBRARY_DIR "${EXATN_ROOT}/lib")
link_directories("${EXATN_ROOT}/lib")
set(EXATN_INCLUDE_ROOT "${EXATN_ROOT}/include")

set (EXATN_INCLUDE_DIRS "${EXATN_INCLUDE_ROOT}/cppmicroservices4;${EXATN_INCLUDE_ROOT}/exatn;${EXATN_INCLUDE_ROOT}/gtest;${EXATN_INCLUDE_ROOT}/exatensor")
set (EXATN_LIBRARIES "exatn;exatn-numerics;exatn-utility;CppMicroServices")

set (BLAS_LIB "@BLAS_LIB@")
set (BLAS_PATH "@BLAS_PATH@")

macro(exatn_add_test TESTNAME)
  add_executable(${TESTNAME} ${ARGN})
  target_link_libraries(${TESTNAME} PRIVATE gtest gmock gtest_main)
  add_test(${TESTNAME} ${TESTNAME})
  set_target_properties(${TESTNAME} PROPERTIES FOLDER tests)
endmacro()

macro(exatn_enable_rpath LIBNAME)
  if(APPLE)
    set_target_properties(${LIBNAME} PROPERTIES INSTALL_RPATH "@loader_path")
    set_target_properties(${LIBNAME} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
  else()
    set_target_properties(${LIBNAME} PROPERTIES INSTALL_RPATH "$ORIGIN")
    set_target_properties(${LIBNAME} PROPERTIES LINK_FLAGS "-shared")
  endif()
endmacro()


set(EXATNLIB "libexatn.so")
set(CPPUSLIB "libCppMicroServices.so.4.0.0")

if (APPLE)
  set(EXATNLIB "libexatn.dylib")
  set(CPPUSLIB "libCppMicroServices.4.0.0.dylib")
endif()

add_library(ExaTensor::ExaTensor SHARED IMPORTED)


set(REQUIRED_EXATENSOR_LIBS
    "@OpenMP_CXX_LIBRARIES@;@OpenMP_Fortran_LIBRARIES@;gfortran")

if(CUDA_FOUND)
  message(STATUS "CUDA ROOT DIR ${CUDA_TOOLKIT_ROOT_DIR}")
  message(STATUS "CUDA LIBS ${CUDA_LIBRARIES}")

  set(
    REQUIRED_EXATENSOR_LIBS
    "${REQUIRED_EXATENSOR_LIBS};${CUDA_LIBRARIES};${CUDA_CUBLAS_LIBRARIES};${CUDA_cudadevrt_LIBRARY};${CUDA_TOOLKIT_ROOT_DIR}/lib64/libnvToolsExt.so"
    )
endif()

if(BLAS_LIB AND BLAS_PATH)

  set(BLAS_LIBRARIES "")

  if (BLAS_LIB STREQUAL "ATLAS")

    find_library(BLAS_LIBRARY blas HINTS ${BLAS_PATH})
    set(BLAS_LIBRARIES "${BLAS_LIBRARY}")

  elseif(BLAS_LIB STREQUAL "MKL")

    find_library(lp64 mkl_intel_lp64 HINTS ${BLAS_PATH})
    find_library(gnu_thread mkl_gnu_thread HINTS ${BLAS_PATH})
    find_library(core mkl_core HINTS ${BLAS_PATH})
    find_library(rt mkl_rt HINTS ${BLAS_PATH})

    set(BLAS_LIBRARIES "${lp64};${gnu_thread};${core};${rt};pthread;m;dl")

  elseif(BLAS_LIB STREQUAL "ACML")
    find_library(acml_mp acml_mp HINTS ${BLAS_PATH})
    set(BLAS_LIBRARIES "${acml_mp}")

  elseif(BLAS_LIB STREQUAL "ESSL")

    find_library(essl essl HINTS ${BLAS_PATH})
    find_library(xlf90_r xlf90_r HINTS ${PATH_IBM_XL_FOR})
    find_library(xlfmath xlfmath HINTS ${PATH_IBM_XL_FOR})
    set(BLAS_LIBRARIES "${essl};${xlf90_r};${xlfmath}")

  endif()

  message(STATUS "Appending ${BLAS_LIBRARIES} to ExaTensor Libraries")
  set(REQUIRED_EXATENSOR_LIBS "${REQUIRED_EXATENSOR_LIBS};${BLAS_LIBRARIES}")
endif()

if(MPI_ROOT_DIR)
  set(
    REQUIRED_EXATENSOR_LIBS
    "${REQUIRED_EXATENSOR_LIBS};${MPI_CXX_LIBRARIES};${MPI_Fortran_LIBRARIES}")
endif()

set_target_properties(ExaTensor::ExaTensor
                      PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                 ""
                                 INTERFACE_LINK_LIBRARIES
                                 "${REQUIRED_EXATENSOR_LIBS}")

set_property(TARGET ExaTensor::ExaTensor
             APPEND
             PROPERTY IMPORTED_CONFIGURATIONS RELEASE)

if(EXA_TALSH_ONLY)
  set(FULLPATHLIBS "${EXATN_ROOT}/lib/libtalsh.so")
  set(NOTFULLPATHLIBS "libtalsh.so")

  if(APPLE)
    set(FULLPATHLIBS "${EXATN_ROOT}/lib/libtalsh.a")
    set(NOTFULLPATHLIBS "libtalsh.a")
  endif()

  set_target_properties(ExaTensor::ExaTensor
                        PROPERTIES IMPORTED_LOCATION_RELEASE
                                   ${FULLPATHLIBS}
                                   IMPORTED_SONAME_RELEASE
                                   ${NOTFULLPATHLIBS})

else()
  set(
    FULLPATHLIBS
    "${EXATN_ROOT}/lib/libtalsh.so;${EXATN_ROOT}/lib/libexatensor.so"
    )
  set(NOTFULLPATHLIBS "libtalsh.so;libexatensor.so")

  if(APPLE)
    set(
      FULLPATHLIBS
      "${EXATN_ROOT}/lib/libtalsh.a;${EXATN_ROOT}/lib/libexatensor.a"
      )
    set(NOTFULLPATHLIBS "libtalsh.a;libexatensor.a")
  endif()

  set_target_properties(ExaTensor::ExaTensor
                        PROPERTIES IMPORTED_LOCATION_RELEASE
                                   ${FULLPATHLIBS}
                                   IMPORTED_SONAME_RELEASE
                                   ${NOTFULLPATHLIBS})

endif()

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DEXATN_SERVICE -fPIC -DPATH_MAX=4096 -Wno-attributes")
if (NOT CUDA_FOUND)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNO_GPU")
endif()

if (NOT TARGET CppMicroServices::CppMicroServices)

# Create imported target CppMicroServices::CppMicroServices
add_library(CppMicroServices::CppMicroServices SHARED IMPORTED)

set_target_properties(CppMicroServices::CppMicroServices PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_variadic_templates;cxx_nullptr"
  INTERFACE_INCLUDE_DIRECTORIES "${EXATN_INCLUDE_ROOT}/cppmicroservices4"
  INTERFACE_LINK_LIBRARIES "dl;pthread"
)

# Import target "CppMicroServices::CppMicroServices" for configuration "Release"
set_property(TARGET CppMicroServices::CppMicroServices APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(CppMicroServices::CppMicroServices PROPERTIES
  IMPORTED_LOCATION_RELEASE "${EXATN_ROOT}/lib/${CPPUSLIB}"
  IMPORTED_SONAME_RELEASE "${CPPUSLIB}"
  )
endif()

# Create imported target exatn::exatn
add_library(exatn::exatn SHARED IMPORTED)

set_target_properties(exatn::exatn PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${EXATN_INCLUDE_ROOT}/exatn;${EXATN_INCLUDE_ROOT}"
  INTERFACE_LINK_LIBRARIES "CppMicroServices::CppMicroServices;exatn::exatn-numerics;exatn::exatn-runtime"
)

# Create imported target exatn::exatn-numerics
add_library(exatn::exatn-numerics SHARED IMPORTED)

set_target_properties(exatn::exatn-numerics PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${EXATN_INCLUDE_ROOT}/exatn;${EXATN_INCLUDE_ROOT}"
  INTERFACE_LINK_LIBRARIES "ExaTensor::ExaTensor"
)

# Create imported target exatn::exatn-runtime
add_library(exatn::exatn-runtime SHARED IMPORTED)

set_target_properties(exatn::exatn-runtime PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${EXATN_INCLUDE_ROOT}/exatn;${EXATN_INCLUDE_ROOT}"
  INTERFACE_LINK_LIBRARIES "CppMicroServices::CppMicroServices;exatn::exatn-numerics;exatn::exatn-runtime-graph"
)

# Create imported target exatn::exatn-runtime-graph
add_library(exatn::exatn-runtime-graph SHARED IMPORTED)

set_target_properties(exatn::exatn-runtime-graph PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${EXATN_INCLUDE_ROOT}/exatn;${EXATN_INCLUDE_ROOT}"
  INTERFACE_LINK_LIBRARIES "CppMicroServices::CppMicroServices;exatn::exatn-numerics"
)


# Import target "exatn::exatn" for configuration "DEBUG"
set_property(TARGET exatn::exatn APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(exatn::exatn PROPERTIES
  IMPORTED_LOCATION_DEBUG "${EXATN_ROOT}/lib/libexatn.so"
  IMPORTED_SONAME_DEBUG "libexatn.so"
  )

# Import target "exatn::exatn-numerics" for configuration "DEBUG"
set_property(TARGET exatn::exatn-numerics APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(exatn::exatn-numerics PROPERTIES
  IMPORTED_LOCATION_DEBUG "${EXATN_ROOT}/lib/libexatn-numerics.so"
  IMPORTED_SONAME_DEBUG "libexatn-numerics.so"
  )

# Import target "exatn::exatn-runtime" for configuration "DEBUG"
set_property(TARGET exatn::exatn-runtime APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(exatn::exatn-runtime PROPERTIES
  IMPORTED_LOCATION_DEBUG "${EXATN_ROOT}/lib/libexatn-runtime.so"
  IMPORTED_SONAME_DEBUG "libexatn-runtime.so"
  )

# Import target "exatn::exatn-runtime-graph" for configuration "DEBUG"
set_property(TARGET exatn::exatn-runtime-graph APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(exatn::exatn-runtime-graph PROPERTIES
  IMPORTED_LOCATION_DEBUG "${EXATN_ROOT}/lib/libexatn-runtime-graph.so"
  IMPORTED_SONAME_DEBUG "libexatn-runtime-graph.so"
  )



set(ExaTN_FOUND TRUE)